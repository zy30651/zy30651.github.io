import{_ as t,c as e,o as i,ag as s}from"./chunks/framework.B-XtCDNB.js";const _=JSON.parse('{"title":"Redis的数据结构解析","description":"","frontmatter":{},"headers":[],"relativePath":"Database/Redis的数据结构解析.md","filePath":"Database/Redis的数据结构解析.md"}'),r={name:"Database/Redis的数据结构解析.md"};function p(o,a,n,l,d,h){return i(),e("div",null,[...a[0]||(a[0]=[s('<h1 id="redis的数据结构解析" tabindex="-1">Redis的数据结构解析 <a class="header-anchor" href="#redis的数据结构解析" aria-label="Permalink to &quot;Redis的数据结构解析&quot;">​</a></h1><h2 id="string" tabindex="-1">String <a class="header-anchor" href="#string" aria-label="Permalink to &quot;String&quot;">​</a></h2><p>Redis中的String类型底层实现主要基于SDS（Simple Dynamic String<strong>简单动态字符串</strong>）结构，并结合int、embstr、raw等不同的编码方式进行优化存储。</p><p>因为C语言的字符串本质是Char*，字符串结尾用\\0标表示，计算长度要遍历，O(n)复杂度；</p><p>SDS：结构包含了长度信息，不用\\0结尾；长度查询为O(1)，还支持内存扩展;</p><h2 id="list" tabindex="-1">List <a class="header-anchor" href="#list" aria-label="Permalink to &quot;List&quot;">​</a></h2><p>底层为压缩链表Ziplist(小数据)和双层链表LinkedList(大数据)；</p><p>3.2版本以后，底层使用QuickList</p><p>ZipList：压缩列表，适合存储小数据，如短列表、小哈希表；内存紧凑，节省内存</p><p>QuickList：通过将链表和ZipList结合，即实现了链表的灵活又节省内存；现在QuickList完全代替了链表；适合频繁对列表进行插入、删除、查找</p><p>它的实现原理是：有多个节点连接而成，整体结构是双向链表，提供O(1)的查找、删除；同时每个节点又是一个ZipList；ZipList是紧凑结构，节省内存</p><h2 id="hash" tabindex="-1">Hash <a class="header-anchor" href="#hash" aria-label="Permalink to &quot;Hash&quot;">​</a></h2><p>使用哈希表(Hash Table)实现，适合小规模数据；存储商品详情；</p><p>4.0使用Ziplist和HashTable；</p><p>6.0使用ListPack</p><h2 id="set" tabindex="-1">Set <a class="header-anchor" href="#set" aria-label="Permalink to &quot;Set&quot;">​</a></h2><p>底层使用哈希表(Hast Table)，快速查找和去重;</p><p>4.0优化了Inset数据结构</p><p>6.0使用ListPack</p><h2 id="sorted-set" tabindex="-1">Sorted Set <a class="header-anchor" href="#sorted-set" aria-label="Permalink to &quot;Sorted Set&quot;">​</a></h2><p>是一种由<strong>跳表</strong>（SkipList）和哈希表（HashTable）组成的数据结构。ZSet结合了集合（Set）的特性和排序功能，能够存储具有唯一性的成员，并根据成员的分数（score）进行排序。</p><p>6.0使用ListPack，对zset进行了优化；</p><p>跳表的实现原理：通过多层链表实现，底层链表保存所有元素，每层链表都是下一层的子集；</p><p>增删改查均从最顶级往下查找要操作的节点；</p><p>能够快速定位O(log n)、范围查询：类似于二分查找；但因为是随机的层级；所以只是近似；平均是O(long n)；</p><h4 id="listpack" tabindex="-1">ListPack <a class="header-anchor" href="#listpack" aria-label="Permalink to &quot;ListPack&quot;">​</a></h4><p>是Redis内部，用于高效存储短小字符串或整数的集合,减少内存占用提升性能.</p><p>在List/Hash/Set/ZSet均有使用，但没有替代原有数据结构</p><p>内存高效、高性能、简单实现</p>',29)])])}const S=t(r,[["render",p]]);export{_ as __pageData,S as default};
