import{_ as a,c as s,o as e,ag as l}from"./chunks/framework.B-XtCDNB.js";const c=JSON.parse('{"title":"MongoDB进阶","description":"","frontmatter":{},"headers":[],"relativePath":"Database/MongoDB进阶.md","filePath":"Database/MongoDB进阶.md"}'),t={name:"Database/MongoDB进阶.md"};function h(n,i,d,o,p,r){return e(),s("div",null,[...i[0]||(i[0]=[l('<h1 id="mongodb进阶" tabindex="-1">MongoDB进阶 <a class="header-anchor" href="#mongodb进阶" aria-label="Permalink to &quot;MongoDB进阶&quot;">​</a></h1><h2 id="mongodb的聚合操作" tabindex="-1">MongoDB的聚合操作 <a class="header-anchor" href="#mongodb的聚合操作" aria-label="Permalink to &quot;MongoDB的聚合操作&quot;">​</a></h2><p>聚合(aggregate)是基于数据处理的聚合管道，每个文档通过一个由多个阶段（stage）组成的管道，可以对每个阶段的管道进行分组、过滤等功能，然后经过一系列的处理，输出相应的结果。</p><p>语法：<code>db.集合名称.aggregate({管道:{表达式}})</code></p><h3 id="常用管道命令" tabindex="-1">常用管道命令 <a class="header-anchor" href="#常用管道命令" aria-label="Permalink to &quot;常用管道命令&quot;">​</a></h3><p>在mongodb中，⽂档处理完毕后， 通过管道进⾏下⼀次处理 常用管道命令如下：</p><ul><li><code>$group</code>： 将集合中的⽂档分组， 可⽤于统计结果</li><li><code>$match</code>： 过滤数据， 只输出符合条件的⽂档</li><li><code>$project</code>： 修改输⼊⽂档的结构， 如重命名、 增加、 删除字段、 创建计算结果</li><li><code>$sort</code>： 将输⼊⽂档排序后输出</li><li><code>$limit</code>： 限制聚合管道返回的⽂档数</li><li><code>$skip</code>： 跳过指定数量的⽂档， 并返回余下的⽂档</li></ul><h3 id="常用表达式" tabindex="-1">常用表达式 <a class="header-anchor" href="#常用表达式" aria-label="Permalink to &quot;常用表达式&quot;">​</a></h3><p>表达式：处理输⼊⽂档并输出 语法：<code>表达式:&#39;$列名&#39;</code> 常⽤表达式:</p><ul><li><code>$sum</code>： 计算总和， $sum:1 表示以⼀倍计数</li><li><code>$avg</code>： 计算平均值</li><li><code>$min</code>： 获取最⼩值</li><li><code>$max</code>： 获取最⼤值</li><li><code>$push</code>： 在结果⽂档中插⼊值到⼀个数组中</li></ul><h3 id="管道命令之-group" tabindex="-1">管道命令之<code>$group</code> <a class="header-anchor" href="#管道命令之-group" aria-label="Permalink to &quot;管道命令之`$group`&quot;">​</a></h3><h4 id="按照某个字段进行分组" tabindex="-1">按照某个字段进行分组 <a class="header-anchor" href="#按照某个字段进行分组" aria-label="Permalink to &quot;按照某个字段进行分组&quot;">​</a></h4><p><code>$group</code>是所有聚合命令中用的最多的一个命令，用来将集合中的文档分组，可用于统计结果</p><p>其中注意点：</p><ul><li><code>db.db_name.aggregate</code>是语法，所有的管道命令都需要写在其中</li><li><code>_id</code> 表示分组的依据，按照哪个字段进行分组，需要使用<code>$gender</code>表示选择这个字段进行分组</li><li><code>$sum:1</code> 表示把每条数据作为1进行统计，统计的是该分组下面数据的条数</li></ul><h4 id="group-by-null" tabindex="-1">group by null <a class="header-anchor" href="#group-by-null" aria-label="Permalink to &quot;group by null&quot;">​</a></h4><p>当我们需要统计整个文档的时候，<code>$group</code> 的另一种用途就是把整个文档分为一组进行统计</p><p>其中注意点：<code>_id:null</code> 表示不指定分组的字段，即统计整个文档，此时获取的<code>counter</code>表示整个文档的个数</p><h4 id="数据透视" tabindex="-1">数据透视 <a class="header-anchor" href="#数据透视" aria-label="Permalink to &quot;数据透视&quot;">​</a></h4><p>正常情况在统计的不同性别的数据的时候，需要知道所有的name，需要逐条观察，如果通过某种方式把所有的name放到一起，那么此时就可以理解为数据透视</p><h3 id="管道命令之-match" tabindex="-1">管道命令之<code>$match</code> <a class="header-anchor" href="#管道命令之-match" aria-label="Permalink to &quot;管道命令之`$match`&quot;">​</a></h3><p><code>$match</code>用于进行数据的过滤，是在能够在聚合操作中使用的命令，和<code>find</code>区别在于<code>$match</code> 操作可以把结果交给下一个管道处理，而<code>find</code>不行</p><h3 id="管道命令之-project" tabindex="-1">管道命令之<code>$project</code> <a class="header-anchor" href="#管道命令之-project" aria-label="Permalink to &quot;管道命令之`$project`&quot;">​</a></h3><p><code>$project</code>用于修改文档的输入输出结构，例如重命名，增加，删除字段</p><h3 id="管道命令之-sort" tabindex="-1">管道命令之<code>$sort</code> <a class="header-anchor" href="#管道命令之-sort" aria-label="Permalink to &quot;管道命令之`$sort`&quot;">​</a></h3><p><code>$sort</code>用于将输入的文档排序后输出</p><h3 id="管道命令之-skip-和-limit" tabindex="-1">管道命令之<code>$skip</code> 和 <code>$limit</code> <a class="header-anchor" href="#管道命令之-skip-和-limit" aria-label="Permalink to &quot;管道命令之`$skip` 和 `$limit`&quot;">​</a></h3><ul><li><code>$limit</code>限制返回数据的条数</li><li><code>$skip</code> 跳过指定的文档数，并返回剩下的文档数</li><li>同时使用时先使用skip在使用limit</li></ul><h2 id="mongdb的索引" tabindex="-1">Mongdb的索引 <a class="header-anchor" href="#mongdb的索引" aria-label="Permalink to &quot;Mongdb的索引&quot;">​</a></h2><h3 id="为什么mongdb需要创建索引" tabindex="-1">为什么mongdb需要创建索引 <a class="header-anchor" href="#为什么mongdb需要创建索引" aria-label="Permalink to &quot;为什么mongdb需要创建索引&quot;">​</a></h3><ul><li>加快查询速度</li><li>进行数据的去重</li></ul><h3 id="mongodb创建简单的索引方法" tabindex="-1">mongodb创建简单的索引方法 <a class="header-anchor" href="#mongodb创建简单的索引方法" aria-label="Permalink to &quot;mongodb创建简单的索引方法&quot;">​</a></h3><ul><li>语法： <ul><li><code>db.集合.ensureIndex({属性:1})</code>，1表示升序， -1表示降序</li><li><code>db.集合.createIndex({属性:1})</code></li><li>上面两个命令效果等价</li></ul></li><li>具体操作：db.db_name.ensureIndex({name:1})</li></ul><h3 id="创建索引前后查询速度对比" tabindex="-1">创建索引前后查询速度对比 <a class="header-anchor" href="#创建索引前后查询速度对比" aria-label="Permalink to &quot;创建索引前后查询速度对比&quot;">​</a></h3><p>测试：插入10万条数据到数据库中 插入数据：</p><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(i</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;i</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">100000</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;i</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">++</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">){</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">db</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">t255</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">insert</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;test&#39;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">i,age:i})}</span></span></code></pre></div><p>创建索引前：</p><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">db</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">t1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.find({</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;test10000&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}) </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">db</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">t1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.find({</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;test10000&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}).explain(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;executionStats&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>创建索引后：</p><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">db</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">t255</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.ensureIndex({</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}) </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">db</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">t1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.find({</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;test10000&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}).explain(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;executionStats&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><h3 id="索引的查看" tabindex="-1">索引的查看 <a class="header-anchor" href="#索引的查看" aria-label="Permalink to &quot;索引的查看&quot;">​</a></h3><p>默认情况下_id是集合的索引</p><p>查看方式：<code>db.collection_name.getIndexes()</code></p><h3 id="mongodb创建唯一索引" tabindex="-1">mongodb创建唯一索引 <a class="header-anchor" href="#mongodb创建唯一索引" aria-label="Permalink to &quot;mongodb创建唯一索引&quot;">​</a></h3><p>在默认情况下mongdb的索引字段的值是可以相同的,仅仅能够提高查询速度</p><p>添加唯一索引的语法：</p><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">db</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">collection_name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.ensureIndex({</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;name&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">},{</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;unique&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:true})</span></span></code></pre></div><h3 id="删除索引" tabindex="-1">删除索引 <a class="header-anchor" href="#删除索引" aria-label="Permalink to &quot;删除索引&quot;">​</a></h3><p>语法：<code>db.t1.dropIndex({&#39;索引名称&#39;:1})</code></p><h3 id="建立复合索引" tabindex="-1">建立复合索引 <a class="header-anchor" href="#建立复合索引" aria-label="Permalink to &quot;建立复合索引&quot;">​</a></h3><p>在进行数据去重的时候，可能用一个字段来保证数据的唯一性，这个时候可以考虑建立复合索引来实现。</p><p>建立复合索引的语法：<code>db.collection_name.ensureIndex({字段1:1,字段2:1})</code></p><h3 id="建立索引注意点" tabindex="-1">建立索引注意点 <a class="header-anchor" href="#建立索引注意点" aria-label="Permalink to &quot;建立索引注意点&quot;">​</a></h3><ul><li>根据需要选择是否需要建立唯一索引</li><li>索引字段是升序还是降序在单个索引的情况下不影响查询效率，但是带复合索引的条件下会有影响</li></ul><h2 id="mongodb的备份和恢复" tabindex="-1">mongodb的备份和恢复 <a class="header-anchor" href="#mongodb的备份和恢复" aria-label="Permalink to &quot;mongodb的备份和恢复&quot;">​</a></h2><h3 id="备份" tabindex="-1">备份 <a class="header-anchor" href="#备份" aria-label="Permalink to &quot;备份&quot;">​</a></h3><p>备份的语法：</p><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">mongodump </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">h dbhost </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">d dbname </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">o dbdirectory</span></span></code></pre></div><ul><li><code>-h</code>： 服务器地址， 也可以指定端⼝号</li><li><code>-d</code>： 需要备份的数据库名称</li><li><code>-o</code>： 备份的数据存放位置， 此⽬录中存放着备份出来的数据</li></ul><h3 id="恢复" tabindex="-1">恢复 <a class="header-anchor" href="#恢复" aria-label="Permalink to &quot;恢复&quot;">​</a></h3><p>恢复语法：<code>mongorestore -h dbhost -d dbname --dir dbdirectory</code></p><ul><li><code>-h</code>： 服务器地址</li><li><code>-d</code>： 需要恢复的数据库实例</li><li><code>--dir</code>： 备份数据所在位置</li></ul>',62)])])}const g=a(t,[["render",h]]);export{c as __pageData,g as default};
