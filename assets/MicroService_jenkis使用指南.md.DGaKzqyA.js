import{_ as i,c as a,o as l,ag as n}from"./chunks/framework.BmLMQRXF.js";const g=JSON.parse('{"title":"jenkins安装和入门使用","description":"","frontmatter":{},"headers":[],"relativePath":"MicroService/jenkis使用指南.md","filePath":"MicroService/jenkis使用指南.md"}'),e={name:"MicroService/jenkis使用指南.md"};function h(t,s,p,k,r,E){return l(),a("div",null,s[0]||(s[0]=[n(`<h1 id="jenkins安装和入门使用" tabindex="-1">jenkins安装和入门使用 <a class="header-anchor" href="#jenkins安装和入门使用" aria-label="Permalink to &quot;jenkins安装和入门使用&quot;">​</a></h1><h2 id="敏捷开发中的持续集成痛点" tabindex="-1">敏捷开发中的持续集成痛点 <a class="header-anchor" href="#敏捷开发中的持续集成痛点" aria-label="Permalink to &quot;敏捷开发中的持续集成痛点&quot;">​</a></h2><p>需求不明确、变更非常频繁</p><blockquote><p>上线、收到用户反馈、需求变更、开发、上线、再接受用户反馈</p><p>频繁的早会、频繁的代码审查、频繁的发布和部署</p></blockquote><h5 id="部署中的痛点" tabindex="-1">部署中的痛点 <a class="header-anchor" href="#部署中的痛点" aria-label="Permalink to &quot;部署中的痛点&quot;">​</a></h5><blockquote><p>如果没有专门运维人员，需要自己打包；</p></blockquote><h2 id="docker安装" tabindex="-1">Docker安装 <a class="header-anchor" href="#docker安装" aria-label="Permalink to &quot;Docker安装&quot;">​</a></h2><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> pull</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> jenkins/jenkins</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> run</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -d</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -p</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 8088:8080</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> \\</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">-p </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">50000:50000</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> \\</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">-v </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/usr/docker/jenkins_data:/var/jenkins_home</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">   \\</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">--restart=on-failure  </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">-u</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --name</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> myjenkins</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> jenkins/jenkins</span></span></code></pre></div><h2 id="jenkins构建服务器流程" tabindex="-1">Jenkins构建服务器流程 <a class="header-anchor" href="#jenkins构建服务器流程" aria-label="Permalink to &quot;Jenkins构建服务器流程&quot;">​</a></h2><h4 id="正常流程" tabindex="-1">正常流程： <a class="header-anchor" href="#正常流程" aria-label="Permalink to &quot;正常流程：&quot;">​</a></h4><p>开发人员提交代码到Git仓库</p><p>测试环境：git clone、git pull、运行可执行文件、产生中间文件</p><p>开发环境：git clone、git pull、运行可执行文件、产生中间文件</p><h4 id="构建流程" tabindex="-1">构建流程： <a class="header-anchor" href="#构建流程" aria-label="Permalink to &quot;构建流程：&quot;">​</a></h4><p>构建服务器：git clone、git pull、运行可执行文件、产生中间文件；甚至打包docker镜像</p><h2 id="安装jenkins常用插件" tabindex="-1">安装Jenkins常用插件 <a class="header-anchor" href="#安装jenkins常用插件" aria-label="Permalink to &quot;安装Jenkins常用插件&quot;">​</a></h2><h4 id="_1-修改插件下载地址" tabindex="-1">1. 修改插件下载地址 <a class="header-anchor" href="#_1-修改插件下载地址" aria-label="Permalink to &quot;1. 修改插件下载地址&quot;">​</a></h4><ol><li>修改default.json文件</li></ol><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> /var/lib/jenkins/updates/default.json</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> &amp;&amp; </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 可以find命令查询</span></span></code></pre></div><ol start="2"><li><p>进入Manage Jenkins -&gt; Plugin -&gt; Advanced settings最下面有Update Site设置为<a href="https://mirrors.tuna.tsinghua.edu.cn/jenkins/updates/update-center.json" target="_blank" rel="noreferrer">update-center.json</a></p></li><li><p>重启</p></li></ol><blockquote><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">http://localhost:8088/restart</span></span></code></pre></div></blockquote><ol start="4"><li>安装插件</li></ol><p>chinese、ssh、git、publish over ssh</p><h2 id="通过free-style构建项目" tabindex="-1">通过free style构建项目 <a class="header-anchor" href="#通过free-style构建项目" aria-label="Permalink to &quot;通过free style构建项目&quot;">​</a></h2><ul><li>新建项目</li></ul><p>​ gin-test-&gt;Freestyle project</p><ul><li><p>新增用户</p><p>Dashboard-&gt;Manage Jenkins-&gt;凭据管理-&gt;全局-&gt;新增用户(user/password、ssh秘钥、证书</p></li><li><p>配置项目的用户</p></li><li><p>立即构建测试</p><ul><li>查询控制台输出验证</li><li>进入构建本地目录检查（/var/jenkins/workspace</li></ul></li><li><p>构建触发配置</p><ul><li>触发远程构建</li><li>其他工程构建后触发(微服务)</li><li>定时构建</li><li>轮询SCM(定时轮询出发Get)</li><li>Github hook</li></ul></li><li><p>Build Steps(构建)</p><ul><li>执行shell（最常用）</li></ul></li><li><p>构建后操作</p><ul><li><p>构建其他工程（关联其他工程 ）</p></li><li><p>E-mail Notification（邮件发送)</p></li><li><p>Send build artifacts over SSH(构建后发送到某个ssh服务器，需安装publish over ssh)</p><ul><li><p>可以配置密码、私钥key地址、私钥key，目前密码到阿里云服务有报错；秘钥到aws没问题</p></li><li><p>Source files：希望传到服务器的文件夹和文件。路径是相对jenkins的workspace的项目名称。例如是Test_project的java项目，编译打包后路径为Test_Project/target，则Source files可以输入target/*.jar</p></li><li><p>Remove prefix：如果Source files为target/*.jar，但是不想把target目录创建到服务器端，这个时候可以在Remove prefix输入target</p></li><li><p>Remote directory：这里指定文件将被copy到服务器的路径</p><blockquote><p>被copy文件在服务器上的完整路径=登陆服务器账号的默认路径+RemoteDirectory</p></blockquote></li><li><p>Exec command：链接服务器之后要执行的命令</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># server设置172.22.0.6，确认能链接;默认会设置文件夹/mnt/data</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 远方git目录结构为target-&gt;test.go、test.py</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Source files: target/*.go</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Remote Directory:gin_test1</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Exec command:echo &quot;传完了&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 此时构建完成后会在0.6服务器的默认文件夹/mnt/data下新增gin_test1/test.go文件结构</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 此处的target/*，只有默认1层子目录；如果多目录需要**</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 貌似不会删除源文件？</span></span></code></pre></div></li></ul></li></ul></li></ul><h2 id="通过pipeline实现持续集成" tabindex="-1">通过pipeline实现持续集成 <a class="header-anchor" href="#通过pipeline实现持续集成" aria-label="Permalink to &quot;通过pipeline实现持续集成&quot;">​</a></h2><h4 id="流水线-pipeline" tabindex="-1">流水线（Pipeline） <a class="header-anchor" href="#流水线-pipeline" aria-label="Permalink to &quot;流水线（Pipeline）&quot;">​</a></h4><p>Jenkins 流水线是一种用于定义和自动化软件构建、测试和部署过程的方式。</p><p>实际上是基于 Groovy 脚本实现的CI/CD领域特定语言(DSL)，主要分为两类；</p><p>一类叫做Declarative Pipeline(声明式Pipeline)；</p><blockquote><p>体验上更接近于我们熟知的travis CI的travis.yml，通过声明自己要做的事情来规范流程</p><p>这个使用方式可以结合配置底部的流水线语法，根据freestyle的操作，转化为Groovy代码</p><div class="language-groovy vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">groovy</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">pipeline {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    agent any</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    stages {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        stage(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;pull code&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            steps {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                git </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">credentialsId</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;c211129d-6a42-4a7e-a155-18e5744cace5&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">url</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;https://gitee.com/zy30651/gin-test.git&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        stage(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;build project&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            steps {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                sh </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;&#39;&#39;echo &quot;开始构建&quot;</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">                    echo &quot;构建完成&quot;&#39;&#39;&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        stage(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;deploy project&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            steps {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                sshPublisher(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">publishers</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: [sshPublisherDesc(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">configName</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;172.22.0.6&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">transfers</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: [sshTransfer(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">cleanRemote</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">false</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">excludes</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">execCommand</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;echo &quot;success&quot;&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">execTimeout</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">120000</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">flatten</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">false</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">makeEmptyDirs</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">false</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">noDefaultExcludes</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">false</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">patternSeparator</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;[, ]+&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">remoteDirectory</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;gin_test/&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">remoteDirectorySDF</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">false</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">removePrefix</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">sourceFiles</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;target/**&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)], </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">usePromotionTimestamp</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">false</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">useWorkspaceInPromotion</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">false</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">verbose</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">false</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)])</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></blockquote><p>一类叫做Scripted Pipeline(脚本式Pipeline)暂不使用</p><ul><li>单一分支：通常用于单一分支的构建部署，适合简单的项目</li><li>灵活性：通过代码定义复杂的构建逻辑，包括条件执行、并行执行等</li><li>可视化：在 Jenkins 中，流水线的执行过程可以通过图形化界面进行可视化，便于监控和调试</li><li>版本控制：流水线定义文件（通常是 Jenkinsfile）可以与代码一起存储在版本控制系统中，便于管理和审查</li></ul><h4 id="多分支流水线-multibranch-pipeline" tabindex="-1">多分支流水线（Multibranch Pipeline） <a class="header-anchor" href="#多分支流水线-multibranch-pipeline" aria-label="Permalink to &quot;多分支流水线（Multibranch Pipeline）&quot;">​</a></h4><p>多分支流水线是 Jenkins 流水线的一种扩展，允许 Jenkins 自动识别和构建多个分支。它适用于使用 Git 或其他版本控制系统的项目。</p><ul><li>自动发现分支：Jenkins 会自动扫描指定的代码库，识别所有分支，并为每个分支创建独立的流水线。</li><li>独立配置：每个分支可以有自己的 Jenkinsfile，允许不同的构建和部署逻辑。</li><li>支持 Pull Requests：可以配置以支持对 Pull Requests 的构建和测试，确保代码合并前的质量。</li><li>可视化管理：在 Jenkins 界面中，可以清晰地看到每个分支的构建状态和历史记录。</li></ul><h4 id="流水线的选择" tabindex="-1">流水线的选择 <a class="header-anchor" href="#流水线的选择" aria-label="Permalink to &quot;流水线的选择&quot;">​</a></h4><h5 id="单一流水线" tabindex="-1">单一流水线： <a class="header-anchor" href="#单一流水线" aria-label="Permalink to &quot;单一流水线：&quot;">​</a></h5><ul><li><p>项目简单，只有1个主分支；简单的部署过程</p><blockquote><p>仍然建议使用Freestyle；</p><p>除非构建过程比较复杂，构建过程不能丢失；因为可以导入导出</p></blockquote></li><li><p>适合小型团队</p></li></ul><h5 id="多分支流水线" tabindex="-1">多分支流水线： <a class="header-anchor" href="#多分支流水线" aria-label="Permalink to &quot;多分支流水线：&quot;">​</a></h5><ul><li>项目有多个活跃分支，或者团队使用Git Flow等工作流时</li><li>适合中大型项目</li></ul><h2 id="通过jenkinsfile管理构建pipeline脚本" tabindex="-1">通过JenkinsFile管理构建pipeline脚本 <a class="header-anchor" href="#通过jenkinsfile管理构建pipeline脚本" aria-label="Permalink to &quot;通过JenkinsFile管理构建pipeline脚本&quot;">​</a></h2><p>使用pipeline的目的是能方便将freestyle的操作转为代码，更好的管理代码；</p><p>如果代码一味放在jenkins管理，如果jenkins挂掉或丢失；脚本会丢失；</p><p>而pipeline脚本的编写需要花费一些精力、时间、测试等</p><p>而且，项目更新，pipeline脚本也会更新；如果能加上版本控制就最好了</p><p>特点：代码可控性更好</p><h5 id="解决方法" tabindex="-1">解决方法： <a class="header-anchor" href="#解决方法" aria-label="Permalink to &quot;解决方法：&quot;">​</a></h5><p>可以在项目里新建文件：Jenkinsfile，并且放在项目根目录下</p><p>Jenkinsfile</p><div class="language-groovy vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">groovy</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">pipeline {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    agent any</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    stages {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        stage(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;pull code&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            steps {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                git </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">credentialsId</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;c211129d-6a42-4a7e-a155-18e5744cace5&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">url</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;https://gitee.com/zy30651/gin-test.git&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        stage(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;build project&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            steps {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                sh </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;&#39;&#39;echo &quot;开始构建&quot;</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">                    echo &quot;构建完成&quot;&#39;&#39;&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        stage(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;deploy project&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            steps {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                sshPublisher(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">publishers</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: [sshPublisherDesc(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">configName</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;172.22.0.6&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">transfers</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: [sshTransfer(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">cleanRemote</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">false</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">excludes</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">execCommand</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;echo &quot;success&quot;&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">execTimeout</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">120000</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">flatten</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">false</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">makeEmptyDirs</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">false</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">noDefaultExcludes</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">false</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">patternSeparator</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;[, ]+&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">remoteDirectory</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;gin_test/&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">remoteDirectorySDF</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">false</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">removePrefix</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">sourceFiles</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;target/**&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)], </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">usePromotionTimestamp</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">false</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">useWorkspaceInPromotion</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">false</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">verbose</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">false</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)])</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h2 id="通过远程和其他工程触发构建" tabindex="-1">通过远程和其他工程触发构建 <a class="header-anchor" href="#通过远程和其他工程触发构建" aria-label="Permalink to &quot;通过远程和其他工程触发构建&quot;">​</a></h2><p>现在都是手动点击构建，我们希望：可以在一些情况下，自动触发构建。</p><p>一些情况如下①②③④为Jenkins默认的触发器：</p><ul><li><p>其他工程构建后触发①</p><ul><li>关注的项目（此处可以选择Jenkins的多个构建工程） <ul><li>只有构建稳定时触发</li><li>即使构建不稳定时也会触发</li><li>即使构建失败时也会触发</li><li>Always trigger, even if the build is aborted</li></ul></li></ul></li><li><p>定时构建②</p></li><li><p>GitHub hook trigger for GITScm polling</p></li><li><p>轮询 SCM③</p></li><li><p>静默期</p></li><li><p>触发远程构建 (例如,使用脚本)④</p><ul><li><p>身份验证令牌(建议随机生成)，此处样例：zy30651_microsrv</p></li><li><p>通过网址进行触发，get请求</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">http://localhost:8088/job/pipeline_text_otherproject/build?token</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">=zy30651_microsrv</span></span></code></pre></div></li><li><p>通过网址携带参数触发</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">http://localhost:8088/job/pipeline_text_otherproject/buildWithParameters?token</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">=my_token</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&amp;&amp;cause</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">Cause+Text</span></span></code></pre></div></li></ul></li></ul>`,57)]))}const o=i(e,[["render",h]]);export{g as __pageData,o as default};
